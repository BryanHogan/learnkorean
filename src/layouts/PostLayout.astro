---
import BaseLayout from "./BaseLayout.astro";
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import { Image } from "astro:assets";
import TableOfContentsList from "../components/TableOfContents/TableOfContentsList.astro";
import { generateToC } from "../components/TableOfContents/generateToC";
import { Icons } from "../components/Icons";
import Icon from "../components/Icon.astro";

interface Props {
	post: CollectionEntry<"chapters"> | CollectionEntry<"posts">;
}
const { post } = Astro.props;
const { headings } = await post.render();

function isChapterEntry(
	post: CollectionEntry<"chapters"> | CollectionEntry<"posts">,
): post is CollectionEntry<"chapters"> {
	return (post as CollectionEntry<"chapters">).data.unit !== undefined;
}

const allChaptersOfUnit = await (async () => {
	if (isChapterEntry(post)) {
		return (
			await getCollection(
				"chapters",
				({ data }) => data.unit == post.data.unit,
			)
		).sort((a, b) => a.data.sortOrder - b.data.sortOrder);
	}
	return [];
})();
const indexOfChapter = allChaptersOfUnit.findIndex(
	(posts) => post.data.title === posts.data.title,
);
---

<BaseLayout title={post.data.title} metaDescription={post.data.description}>
	<meta property="og:image" content={post.data.cover.src} slot="head" />
	<meta property="og:image:alt" content={post.data.description} slot="head" />
	<section>
		<div class="center-container">
			<Image
				src={post.data.cover as ImageMetadata}
				alt={post.data.coverAlt}
				class="cover-image"
				width={1600}
				height={900}
			/>
			<div class="text-section modern-container post-content-container">
				<h1 id="_top" class="text-align-center">{post.data.title}</h1>
				<slot />
			</div>
		</div>
		<aside>
			<div class="toc">
				<svg
					class="toc-dropdown-icon"
					width="26"
					height="26"
					viewBox="0 0 24 24"
					fill="currentColor"
					set:html={Icons["magnifier"]}
				/>
				<div class="toc-items">
					<p><strong>Table Of Contents</strong></p>
					<TableOfContentsList
						toc={generateToC(headings, {
							minHeadingLevel: 1,
							maxHeadingLevel: 6,
							title: post.data.title,
						})}
					/>
					<div class="toc-next-prev-container">
						{
							allChaptersOfUnit[indexOfChapter - 1] &&
							isChapterEntry(post) ? (
								<a
									href={
										"/unit-" +
										post.data.unit +
										`/${allChaptersOfUnit[indexOfChapter - 1].slug}`
									}
								>
									<Icon
										class="icon"
										name="leftarrow"
										size="1.6em"
										color="var(--color-main-3)"
									/>
								</a>
							) : null
						}
						{
							allChaptersOfUnit[indexOfChapter + 1] &&
							isChapterEntry(post) ? (
								<a
									href={
										"/unit-" +
										post.data.unit +
										`/${allChaptersOfUnit[indexOfChapter + 1].slug}`
									}
								>
									<Icon
										class="icon"
										name="rightarrow"
										size="1.6em"
										color="var(--color-main-3)"
									/>
								</a>
							) : null
						}
					</div>
				</div>
			</div>
		</aside>
	</section>
	<div class="next-prev-post-section">
		{
			allChaptersOfUnit[indexOfChapter - 1] && isChapterEntry(post) ? (
				<div>
					<p>Previous Chapter:</p>
					<a
						href={
							"/unit-" +
							post.data.unit +
							`/${allChaptersOfUnit[indexOfChapter - 1].slug}`
						}
					>
						{allChaptersOfUnit[indexOfChapter - 1].data.title}
					</a>
				</div>
			) : null
		}
		{
			allChaptersOfUnit[indexOfChapter + 1] && isChapterEntry(post) ? (
				<div style="margin-left: auto;">
					<p>Next Chapter:</p>
					<a
						href={
							"/unit-" +
							post.data.unit +
							`/${allChaptersOfUnit[indexOfChapter + 1].slug}`
						}
					>
						{allChaptersOfUnit[indexOfChapter + 1].data.title}
					</a>
				</div>
			) : null
		}
	</div>
</BaseLayout>
<style>
	:global(h1),
	:global(h2),
	:global(h3),
	:global(h4),
	:global(h5),
	:global(h6),
	:global(a) {
		scroll-margin-top: var(--navbar-height);
	}
	section {
		display: flex;
		justify-content: center;
		margin-inline: auto;
		max-width: 1300px;
		flex-wrap: wrap;
	}
	.center-container {
		display: flex;
		flex-direction: column;
		align-items: center;
		flex-wrap: wrap;
		max-width: 750px;
		flex-grow: 1;
		overflow-x: hidden;
	}

	.post-content-container {
		& :global(h1) {
			text-wrap: balance;
		}
		& :global(h2) {
			word-break: break-word;
			text-decoration: underline;
			text-decoration-color: var(--color-accent-1);
		}
		& :global(h3) {
			word-break: break-word;
		}
		& :global(img) {
			object-fit: scale-down;
			max-width: 100%;
			height: auto;
			border-radius: 0.25rem;
			margin-inline: auto;
		}
		& :global(ol),
		& :global(ul) {
			word-break: break-word;
			padding-inline-start: 1.5rem;
			max-width: 100%;
		}
		& :global(blockquote) {
			border-left: 2px solid var(--color-accent-1);
			padding: 0.75em 1em 0.75em 1.25em;
			border-radius: 0 0.5rem 0.5rem 0;
			background-color: var(--color-main-2);
			& :global(footer) {
				margin-top: 0.5em;
			}
		}
		& :global(table) {
			border-collapse: collapse;
			width: fit-content;
			max-width: 100%;
			border: 2px solid var(--color-side-1);
			display: block;
			margin-inline: auto;
			overflow-x: auto;
			& :global(td) {
				border: 1px solid var(--color-side-1);
				padding-block: 12px;
				padding-inline: 8px;
			}
			& :global(th) {
				border: 1px solid var(--color-side-1);
				padding: 12px;
			}
			& :global(tbody) :global(tr:nth-child(odd)) {
				background-color: var(--color-main-2);
				background-color: color-mix(
					in srgb,
					var(--color-accent-1) 20%,
					transparent
				);
			}
			& :global(tr td:first-of-type) {
				padding-inline: 1em;
			}
		}
		& :global(#footnote-label) {
			font-size: 1.4em;
			text-decoration: none;
			padding-bottom: 0.4em;
		}
	}
	.next-prev-post-section {
		width: 90%;
		max-width: 900px;
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		flex-wrap: wrap;
		margin-inline: auto;
		margin-top: var(--space-xxl);
		& > * {
			max-width: 45%;
			flex: 1;
			padding: 1em;
			border: 1px solid var(--color-side-1);
			border-radius: 1em;
		}
	}
	.cover-image {
		width: 100%;
		max-width: 675px; /* same as media query down below */
		height: auto;
		margin-top: 1rem;
		margin-bottom: 4rem;
		border-radius: 1rem;
	}
	aside {
		position: relative;
	}
	.toc {
		position: fixed;
		z-index: 10;
	}
	.toc-dropdown-icon {
		display: none;
		margin-left: auto;
		padding: 3px;
	}
	.toc-next-prev-container {
		width: max-content;
		margin-inline-start: 0.5rem;
		margin-block-start: var(--space-xs);
		transition: all 2000ms ease-in;
		& :global(> *) {
			display: inline-block;
		}
		& :global(.icon) {
			border-radius: 5px;
			transition: all 200ms ease-in;
			vertical-align: middle;
			border: 1px solid var(--color-main-1);
			&:hover {
				border: 1px solid var(--color-accent-1);
				color: var(--color-accent-1);
			}
		}
	}

	@media only screen and (max-width: 675px) {
		.cover-image {
			border-radius: 0;
		}
	}
	@media only screen and (max-width: 1200px) {
		.toc-dropdown-icon {
			display: block;
		}
		.toc .toc-items {
			display: none;
		}
		.toc:hover .toc-items {
			display: block;
		}
		.toc {
			position: fixed;
			top: calc(var(--navbar-height) + 1rem);
			right: 0;
			padding-right: 0.5rem;
			background-color: var(--color-main-1);
			background-color: color-mix(
				in srgb,
				var(--color-main-1) 90%,
				transparent
			);
			backdrop-filter: blur(0.15rem);
			border-radius: 1rem 0 0 1rem;
		}
		.toc-items {
			padding-left: 0.5rem;
			padding-bottom: 1rem;
			min-width: 80vw;
		}
		aside,
		.toc {
			z-index: 1;
		}
	}
</style>
